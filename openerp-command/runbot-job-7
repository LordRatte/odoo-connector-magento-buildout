#! /usr/bin/env python
"""
runbot-job-7 is a small script intended to perform tasks on OpenERP projects,
in particular testing.

Testing on the 7.0 series is done by first installing a new database with the
`base` module, then another database with almost all addons, then finally
spawning a server to run javascript tests (potentially) against it.
"""
import argparse
from contextlib import contextmanager
import json
import os
import re
import subprocess
import sys
import time

install_base = True
install_all = True
javascript_tests = True
install_base_log_path = 'test-base.txt'
install_all_log_path = 'test-all.txt'
server_log_path = 'test-js-server.txt'
javascript_tests_log_path = 'test-js.txt'

ORIGINAL_PATH = os.environ.get('PATH','').split(':')

def oe(env, log_path, command):
    """
    Small wrapper around the `oe` command. It is used like:
        oe({..}, path_to_logs, 'initialize --tests')
    """
    if log_path is None:
        log_file = None
    else:
        log_file = open(log_path, 'w')
    p = subprocess.Popen(['oe'] + command.split(),
        stdout=log_file, stderr=log_file, close_fds=True, env=env)
    return p.wait()

def wait_until_server_is_ready(args):
    for _ in xrange(20):
        with open(os.path.join(args.log_prefix, server_log_path), 'r') as f:
            for line in f:
                if re.search('HTTP service (.*) running on', line):
                    return
        time.sleep(1)

def check_install_success(log_path):
    with open(log_path, 'r') as f:
        for line in f:
            if re.search('openerp.modules.loading: Modules loaded.', line):
                return True
    return False

@contextmanager
def server(args):
    server_pid = None
    p = None

    try:
        env = env_from_args(args, 'base')
        log_file = open(os.path.join(args.log_prefix, server_log_path), 'w')
        cmd = 'python2 %s/openerp-server --no-netrpc --xmlrpc-port %s --addons-path %s --pidfile server-pid.txt' % \
            (args.server_path, args.test_port, env['OPENERP_ADDONS'].replace(':', ','))
        p = subprocess.Popen(cmd.split(), stdout=log_file, stderr=log_file, close_fds=True)
        server_pid = p.pid
        wait_until_server_is_ready(args)
    except:
        sys.stderr.write("Can't start the server.\n")

    try:
        yield p
    finally:
        if server_pid:
            try:
                os.kill(server_pid, 9)
            except OSError:
                pass

def env_from_args(args, database_suffix):
    paths = [args.server_path]
    addons = [
        args.addons_path,
        os.path.join(args.web_path, 'addons'),
        os.path.join(args.server_path, 'openerp/tests/addons')
    ]
    e = {
        'PYTHONPATH': ':'.join(paths),
        'PATH': ':'.join(paths + ORIGINAL_PATH),
        'OPENERP_DATABASE': '%s-%s' % (args.db_prefix, database_suffix),
        'OPENERP_ADDONS': ':'.join(addons),
        'OPENERP_HOST': '127.0.0.1',
        'OPENERP_PORT': args.test_port,
    }
    return e

def run(args):
    results = {}

    for d in (args.log_prefix,):
        if not os.path.exists(d):
            os.mkdir(d)

    if install_base:
        results['install_base'] = 1 # assume failure
        try:
            env = env_from_args(args, 'base')
            oe(env, os.path.join(args.log_prefix, install_base_log_path), 'initialize --tests')
            r = check_install_success(os.path.join(args.log_prefix, install_base_log_path))
            results['install_base'] = 0 if r else 1
        except:
            sys.stderr.write("install_base raised an exception.\n")

    if install_all:
        results['install_all'] = 1 # assume failure
        try:
            env = env_from_args(args, 'all')
            oe(env, os.path.join(args.log_prefix, install_all_log_path), 'initialize --all-modules --exclude auth_ldap --exclude document_ftp --tests')
            r = check_install_success(os.path.join(args.log_prefix, install_all_log_path))
            results['install_all'] = 0 if r else 1
        except:
            sys.stderr.write("install_all raised an exception.\n")

    if javascript_tests:
        results['javascript_tests'] = 1 # assume failure
        try:
            env = env_from_args(args, 'all')
            with server(args) as p:
                r = oe(env, os.path.join(args.log_prefix, javascript_tests_log_path),
                    'run-tests -d %s -p %s -m web.test_js' % (env['OPENERP_DATABASE'], env['OPENERP_PORT']))
                results['javascript_tests'] = r
        except:
            sys.stderr.write("javascript_tests raised an exception.\n")

    print json.dumps(results)
    sys.exit(1 if any(results.values()) else 0)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description=__doc__)

    parser.add_argument('--db-prefix', metavar='STRING',
        required=True,
        help='the db-prefix is used to name databases')
    parser.add_argument('--log-prefix', metavar='PATH',
        required=True,
        help='the log-prefix is used to create a log directory')
    parser.add_argument('--server-path', metavar='PATH',
        required=True,
        help='path to the server library and executable')
    parser.add_argument('--addons-path', metavar='PATH',
        required=True,
        help='path to the addons')
    parser.add_argument('--web-path', metavar='PATH',
        required=True,
        help='path to the web addons')
    parser.add_argument('--test-port', metavar='PORT',
        required=True,
        help='port used to run the javascript tests')

    parser.set_defaults(run=run)
    args = parser.parse_args()
    args.run(args)
